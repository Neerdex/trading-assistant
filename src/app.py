import streamlit as st
import yfinance as yf
import pandas as pd
import plotly.graph_objects as go
import numpy as np
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
st.set_page_config(
    page_title="–¢—Ä–µ–π–¥–∏–Ω–≥ –ü–æ–º–æ—â–Ω–∏–∫",
    layout="wide",
    page_icon="üíπ"
)
st.title("üíπ –¢—Ä–µ–π–¥–∏–Ω–≥ –ü–æ–º–æ—â–Ω–∏–∫")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
if 'run_analysis' not in st.session_state:
    st.session_state.run_analysis = False

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
def load_data(ticker, period, interval):
    try:
        data = yf.download(
            ticker,
            period=period,
            interval=interval,
            progress=False,
            auto_adjust=True
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –µ—Å—Ç—å —Å—Ç–æ–ª–±–µ—Ü 'Close'
        if data.empty or 'Close' not in data.columns:
            st.error(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è {ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∏–∫–µ—Ä.")
            return pd.DataFrame()
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π —Å —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–æ–π
        try:
            ticker_obj = yf.Ticker(ticker)
            current_info = ticker_obj.fast_info
            current_price = current_info['lastPrice']
            last_close = data['Close'].iloc[-1].item()
            
            if current_price and last_close:
                discrepancy = abs(last_close - current_price)
                if discrepancy > last_close * 0.01:  # >1% —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è
                    st.warning(f"‚ö†Ô∏è –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–æ–π: {discrepancy:.2f} ({discrepancy/last_close*100:.2f}%)")
                    st.write(f"–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ: {last_close:.2f} | –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.2f}")
        except:
            pass
            
        return data
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return pd.DataFrame()

# –°–∞–π–¥–±–∞—Ä
with st.sidebar:
    st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    ticker = st.text_input("–¢–∏–∫–µ—Ä (AAPL, BTC-USD):", "AAPL")
    
    col1, col2 = st.columns(2)
    with col1:
        period = st.selectbox(
            "–ü–µ—Ä–∏–æ–¥",
            ["1d", "5d", "1mo", "3mo", "6mo", "1y", "max"],
            index=2
        )
    with col2:
        interval = st.selectbox(
            "–ò–Ω—Ç–µ—Ä–≤–∞–ª",
            ["1m", "5m", "15m", "30m", "1h", "1d"],
            index=5
        )
    
    if st.button("–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", type="primary"):
        st.session_state.run_analysis = True

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
if st.session_state.run_analysis:
    try:
        with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."):
            data = load_data(ticker, period, interval)
            
        if data.empty:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        else:
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
            if len(data) > 1:
                last_close = data['Close'].iloc[-1].item()
                prev_close = data['Close'].iloc[-2].item()
                change_pct = round(((last_close - prev_close) / prev_close * 100), 2)
            else:
                last_close = data['Close'].iloc[0].item() if len(data) == 1 else 0
                change_pct = 0
                st.warning("–ú–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã")
            
            st.success(f"–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã | {ticker} | {period} | {interval}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
            if last_close > 0:
                metric_col1, metric_col2 = st.columns(2)
                metric_col1.metric("–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞", f"{last_close:.2f}")
                metric_col2.metric("–ò–∑–º–µ–Ω–µ–Ω–∏–µ", f"{change_pct}%", 
                                  delta_color="inverse" if change_pct < 0 else "normal")
            
            # –ì—Ä–∞—Ñ–∏–∫–∏
            if not data.empty and len(data) > 1:
                # –ü—Ä–æ—Å—Ç–æ–π –ª–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –∫–∞–∫ fallback
                st.subheader("–õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫")
                st.line_chart(data['Close'])
                
                # –°–≤–µ—á–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏
                try:
                    fig = go.Figure(data=[go.Candlestick(
                        x=data.index,
                        open=data['Open'],
                        high=data['High'],
                        low=data['Low'],
                        close=data['Close'],
                        name="–¶–µ–Ω—ã",
                        increasing_line_color='green',
                        decreasing_line_color='red'
                    )])
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ
                    if len(data) > 20:
                        data['SMA20'] = data['Close'].rolling(window=20).mean()
                        fig.add_trace(go.Scatter(
                            x=data.index,
                            y=data['SMA20'],
                            name='SMA 20',
                            line=dict(color='blue', width=2)
                        ))
                    
                    if len(data) > 50:
                        data['SMA50'] = data['Close'].rolling(window=50).mean()
                        fig.add_trace(go.Scatter(
                            x=data.index,
                            y=data['SMA50'],
                            name='SMA 50',
                            line=dict(color='orange', width=2)
                        ))
                    
                    fig.update_layout(
                        title=f"{ticker} - –°–≤–µ—á–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫",
                        xaxis_title="–î–∞—Ç–∞",
                        yaxis_title="–¶–µ–Ω–∞ ($)",
                        height=600,
                        template="plotly_white",
                        showlegend=True,
                        xaxis_rangeslider_visible=False
                    )
                    
                    st.plotly_chart(fig, use_container_width=True)
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Å–≤–µ—á–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}")
                    st.write("–ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç")
            
            # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            with st.expander("üìã –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ"):
                st.dataframe(data.tail(20).sort_index(ascending=False))
                
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—á–µ—Å—Ç–≤–µ –¥–∞–Ω–Ω—ã—Ö
            with st.expander("üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö"):
                st.write(f"**–ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö:** {data.index[0].strftime('%Y-%m-%d')} - {data.index[-1].strftime('%Y-%m-%d')}")
                st.write(f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫:** {len(data)}")
                st.write(f"**–ò—Å—Ç–æ—á–Ω–∏–∫:** Yahoo Finance")
                st.write(f"**–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
                
    except Exception as e:
        st.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        st.write("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:")
        st.write(f"- –¢–∏–∫–µ—Ä: {ticker}")
        st.write(f"- –ü–µ—Ä–∏–æ–¥: {period}")
        st.write(f"- –ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval}")
        # –í—ã–≤–æ–¥–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        st.write("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö:")
        st.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {len(data)}")
        st.write(f"–ö–æ–ª–æ–Ω–∫–∏: {data.columns.tolist()}")
        if not data.empty:
            st.write("–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å—Ç—Ä–æ–∫:")
            st.write(data.tail())
else:
    st.info("–ó–∞–¥–∞–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –Ω–∞–∂–º–∏—Ç–µ '–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'")
    st.image("https://via.placeholder.com/800x400?text=–ì—Ä–∞—Ñ–∏–∫+–ø–æ—è–≤–∏—Ç—Å—è+–ø–æ—Å–ª–µ+–∑–∞–≥—Ä—É–∑–∫–∏", 
             caption="–ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")