import matplotlib
matplotlib.use('Agg')
import streamlit as st
import yfinance as yf
import mplfinance as mpf
import pandas as pd
from datetime import datetime, timedelta

# –ö—ç—à–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
@st.cache_data(ttl=3600)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å
def load_data(ticker, period, interval):
    return yf.download(ticker, period=period, interval=interval, auto_adjust=True)

# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ RSI
def calculate_rsi(data, window=14):
    delta = data['Close'].diff()
    gain = (delta.where(delta > 0, 0)).rolling(window=window).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=window).mean()
    rs = gain / loss
    return 100 - (100 / (1 + rs))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="Trading Assistant", layout="wide")
st.title("üöÄ –ú–æ–π Trading Assistant")

# –°–∞–π–¥–±–∞—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
with st.sidebar:
    st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
    ticker = st.text_input("–¢–∏–∫–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä AAPL):", "AAPL")
    
    # –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞
    period_options = ["1–¥", "1–Ω–µ–¥", "1–º–µ—Å", "3–º–µ—Å", "6–º–µ—Å", "1–≥–æ–¥", "–º–∞–∫—Å"]
    period = st.selectbox("–ü–µ—Ä–∏–æ–¥:", period_options, index=2)
    period_map = {"1–¥": "1d", "1–Ω–µ–¥": "1wk", "1–º–µ—Å": "1mo", 
                 "3–º–µ—Å": "3mo", "6–º–µ—Å": "6mo", "1–≥–æ–¥": "1y", "–º–∞–∫—Å": "max"}
    
    # –í—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    interval_options = ["1–º", "5–º", "15–º", "30–º", "1—á", "1–¥", "1–Ω–µ–¥"]
    interval = st.selectbox("–ò–Ω—Ç–µ—Ä–≤–∞–ª:", interval_options, index=5)
    interval_map = {"1–º": "1m", "5–º": "5m", "15–º": "15m", 
                  "30–º": "30m", "1—á": "1h", "1–¥": "1d", "1–Ω–µ–¥": "1wk"}
    
    # –¢–µ—Ö. –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    st.header("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã")
    show_sma = st.checkbox("SMA (20 –ø–µ—Ä–∏–æ–¥–æ–≤)", True)
    show_rsi = st.checkbox("RSI (14 –ø–µ—Ä–∏–æ–¥–æ–≤)", True)

if ticker:
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        data = load_data(ticker, period_map[period], interval_map[interval])
        
        if data.empty:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∏–∫–µ—Ä.")
        else:
            # –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            if show_sma:
                data['SMA_20'] = data['Close'].rolling(window=20).mean()
                
            if show_rsi:
                data['RSI_14'] = calculate_rsi(data)
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            last_close = data['Close'][-1]
            prev_close = data['Close'][-2] if len(data) > 1 else last_close
            change = ((last_close - prev_close) / prev_close) * 100
            
            col1, col2, col3 = st.columns(3)
            col1.metric("–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞", f"${last_close:.2f}")
            col2.metric("–ò–∑–º–µ–Ω–µ–Ω–∏–µ", f"{change:.2f}%", 
                       delta_color="inverse" if change < 0 else "normal")
            col3.metric("–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", data.index[-1].strftime('%Y-%m-%d %H:%M'))
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
            add_plots = []
            if show_sma:
                add_plots.append(mpf.make_addplot(data['SMA_20'], color='blue'))
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
            fig, axes = mpf.plot(
                data,
                type='candle',
                style='charles',
                title=f"{ticker} | {period} | {interval}",
                ylabel="–¶–µ–Ω–∞ ($)",
                addplot=add_plots,
                returnfig=True,
                figsize=(12, 6),
                volume=True if 'Volume' in data.columns else False,
                show_nontrading=False,
                panel_ratios=(4, 1)
            )
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ RSI –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –ø–∞–Ω–µ–ª–∏
            if show_rsi:
                ax_rsi = axes[0].twinx()
                ax_rsi.plot(data.index, data['RSI_14'], color='purple', alpha=0.7)
                ax_rsi.axhline(30, color='green', linestyle='--', alpha=0.5)
                ax_rsi.axhline(70, color='red', linestyle='--', alpha=0.5)
                ax_rsi.set_ylabel('RSI', color='purple')
                ax_rsi.tick_params(axis='y', labelcolor='purple')
                ax_rsi.set_ylim(0, 100)
            
            st.pyplot(fig)
            
            # –ê–Ω–∞–ª–∏–∑ RSI
            if show_rsi:
                st.subheader("–ê–Ω–∞–ª–∏–∑ RSI")
                last_rsi = data['RSI_14'].iloc[-1]
                st.write(f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ RSI: **{last_rsi:.2f}**")
                
                if last_rsi < 30:
                    st.success("–°–∏–≥–Ω–∞–ª: –ü–ï–†–ï–ü–†–û–î–ê–ù–ù–û–°–¢–¨ (RSI < 30)")
                    st.info("–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è: –í–æ–∑–º–æ–∂–µ–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç –≤–≤–µ—Ä—Ö")
                elif last_rsi > 70:
                    st.warning("–°–∏–≥–Ω–∞–ª: –ü–ï–†–ï–ö–£–ü–õ–ï–ù–ù–û–°–¢–¨ (RSI > 70)")
                    st.info("–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è: –í–æ–∑–º–æ–∂–µ–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç –≤–Ω–∏–∑")
                else:
                    st.info("RSI –≤ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–π –∑–æ–Ω–µ (30-70)")
                
                # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è RSI
                st.write("**–ò—Å—Ç–æ—Ä–∏—è RSI –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥:**")
                st.line_chart(data['RSI_14'])
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            st.subheader("–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π")
            st.dataframe(data.tail(5))
            
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        st.stop()