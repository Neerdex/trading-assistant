import streamlit as st
import pandas as pd
import plotly.graph_objects as go
from data_loader import load_data, get_current_price
from indicators import add_technical_indicators
from paper_trade import PaperTrader
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–¢—Ä–µ–π–¥–∏–Ω–≥ –ü–æ–º–æ—â–Ω–∏–∫",
    layout="wide",
    page_icon="üíπ"
)
st.title("üíπ –¢—Ä–µ–π–¥–∏–Ω–≥ –ü–æ–º–æ—â–Ω–∏–∫")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
if 'run_analysis' not in st.session_state:
    st.session_state.run_analysis = False
    st.session_state.data_loaded = False
    st.session_state.data = pd.DataFrame()
    st.session_state.last_trade_time = 0

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PaperTrader
alpaca_available = False
trader = None
try:
    trader = PaperTrader()
    alpaca_available = True
except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ PaperTrader: {str(e)}")

# –°–∞–π–¥–±–∞—Ä
with st.sidebar:
    st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    ticker = st.text_input("–¢–∏–∫–µ—Ä (AAPL, BTC-USD):", "AAPL")
    
    col1, col2 = st.columns(2)
    with col1:
        period = st.selectbox("–ü–µ—Ä–∏–æ–¥", ["1d", "5d", "1mo", "3mo", "6mo", "1y", "max"], index=2)
    with col2:
        interval = st.selectbox("–ò–Ω—Ç–µ—Ä–≤–∞–ª", ["1m", "5m", "15m", "30m", "1h", "1d"], index=5)
    
    if st.button("–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", type="primary"):
        st.session_state.run_analysis = True
        st.session_state.data_loaded = False
        
    # Paper Trading —Ä–∞–∑–¥–µ–ª
    if alpaca_available:
        st.divider()
        st.header("üìä Paper Trading")
        
        try:
            account = trader.get_account()
            st.success("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Alpaca —É—Å–ø–µ—à–Ω–æ")
            st.caption(f"–ë–∞–ª–∞–Ω—Å: ${account.equity} | –í–∞–ª—é—Ç–∞: {account.currency}")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
        
        with st.form("order_form"):
            st.subheader("–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä")
            order_symbol = st.text_input("–¢–∏–∫–µ—Ä –æ—Ä–¥–µ—Ä–∞", ticker)
            order_qty = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", min_value=1, max_value=100, value=1)
            order_side = st.radio("–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏", ["Buy", "Sell"], index=0)
            
            if st.form_submit_button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ä–¥–µ—Ä"):
                try:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
                    current_time = time.time()
                    if current_time - st.session_state.last_trade_time < 5:
                        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏")
                        st.stop()
                    
                    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
                    if "-" in order_symbol:
                        order_symbol = order_symbol.replace("-", "/")
                        
                    order = trader.place_order(order_symbol, order_qty, order_side)
                    st.success(f"–û—Ä–¥–µ—Ä #{order.id} —Ä–∞–∑–º–µ—â–µ–Ω!")
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    st.session_state.data_loaded = False
                    st.session_state.last_trade_time = current_time
                except Exception as e:
                    error_msg = str(e)
                    if "insufficient balance" in error_msg.lower():
                        st.error("–û—à–∏–±–∫–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ")
                    elif "wash trade" in error_msg.lower():
                        st.error("–û—à–∏–±–∫–∞: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –∏–∑-–∑–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –æ—Ä–¥–µ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    elif "no position" in error_msg.lower():
                        st.error("–û—à–∏–±–∫–∞: –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏")
                    else:
                        st.error(f"–û—à–∏–±–∫–∞: {error_msg}")
                    
        try:
            positions = trader.get_positions()
            if positions:
                st.subheader("–¢–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏")
                for pos in positions:
                    st.info(f"{pos.symbol}: {pos.qty} —à—Ç. | –¶–µ–Ω–∞: ${pos.current_price}")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {str(e)}")

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
if st.session_state.run_analysis and not st.session_state.data_loaded:
    try:
        with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."):
            data = load_data(ticker, period, interval)
            if not data.empty:
                data = add_technical_indicators(data)
            st.session_state.data = data
            st.session_state.data_loaded = True
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        st.session_state.data_loaded = False

if st.session_state.data_loaded:
    data = st.session_state.data
    
    if data.empty:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
        if 'Close' not in data.columns:
            st.error("–î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ü–µ–Ω –∑–∞–∫—Ä—ã—Ç–∏—è")
        else:
            try:
                # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—É—Å—Ç—ã–µ –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç —Å—Ç–æ–ª–±–µ—Ü 'Close'
                if not data.empty and 'Close' in data.columns:
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è
                    if len(data) >= 2:
                        last_close = data['Close'].iloc[-1].item()
                        prev_close = data['Close'].iloc[-2].item()
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–æ–ª—å –ø–µ—Ä–µ–¥ –¥–µ–ª–µ–Ω–∏–µ–º
                        if prev_close != 0:
                            change_pct = ((last_close - prev_close) / prev_close * 100)
                            change_pct = round(change_pct, 2)
                        else:
                            change_pct = 0
                    elif len(data) == 1:
                        last_close = data['Close'].iloc[0].item()
                        change_pct = 0
                    else:
                        last_close = 0
                        change_pct = 0
                    
                    st.success(f"–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã | {ticker} | {period} | {interval}")
                    
                    if last_close > 0:
                        col1, col2 = st.columns(2)
                        col1.metric("–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞", f"{last_close:.2f}")
                        col2.metric("–ò–∑–º–µ–Ω–µ–Ω–∏–µ", f"{change_pct}%", 
                                    delta_color="inverse" if change_pct < 0 else "normal")
                    else:
                        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ")
                else:
                    st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫")
                
                # –ì—Ä–∞—Ñ–∏–∫–∏
                if not data.empty and len(data) > 1 and 'Close' in data.columns:
                    try:
                        fig = go.Figure(data=[go.Candlestick(
                            x=data.index,
                            open=data['Open'],
                            high=data['High'],
                            low=data['Low'],
                            close=data['Close'],
                            name="–¶–µ–Ω—ã",
                            increasing_line_color='green',
                            decreasing_line_color='red'
                        )])
                        
                        if 'SMA20' in data.columns:
                            fig.add_trace(go.Scatter(x=data.index, y=data['SMA20'], name='SMA 20', line=dict(color='blue', width=2)))
                        if 'SMA50' in data.columns:
                            fig.add_trace(go.Scatter(x=data.index, y=data['SMA50'], name='SMA 50', line=dict(color='orange', width=2)))
                        
                        fig.update_layout(
                            title=f"{ticker} - –°–≤–µ—á–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫",
                            height=600,
                            template="plotly_white",
                            xaxis_rangeslider_visible=False
                        )
                        st.plotly_chart(fig, use_container_width=True)
                        
                        if 'RSI' in data.columns:
                            st.subheader("–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä RSI")
                            rsi_fig = go.Figure()
                            rsi_fig.add_trace(go.Scatter(x=data.index, y=data['RSI'], name='RSI', line=dict(color='purple', width=2)))
                            rsi_fig.add_hline(y=30, line_dash="dash", line_color="green")
                            rsi_fig.add_hline(y=70, line_dash="dash", line_color="red")
                            rsi_fig.update_layout(height=300)
                            st.plotly_chart(rsi_fig, use_container_width=True)
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}")
                else:
                    st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
                
                # –î–∞–Ω–Ω—ã–µ
                with st.expander("üìã –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ"):
                    st.dataframe(data.tail(20).sort_index(ascending=False))
                    
                with st.expander("üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö"):
                    st.write(f"**–ü–µ—Ä–∏–æ–¥:** {data.index[0].strftime('%Y-%m-%d')} - {data.index[-1].strftime('%Y-%m-%d')}")
                    st.write(f"**–¢–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö:** {len(data)}")
                    st.write(f"**–ò—Å—Ç–æ—á–Ω–∏–∫:** Yahoo Finance")
                
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
else:
    st.info("–ó–∞–¥–∞–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –Ω–∞–∂–º–∏—Ç–µ '–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'")

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Paper Trading
if alpaca_available and st.session_state.data_loaded:
    st.divider()
    st.header("üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Paper Trading")
    
    col1, col2 = st.columns(2)
    
    with col1:
        try:
            st.subheader("–ò—Å—Ç–æ—Ä–∏—è –æ—Ä–¥–µ—Ä–æ–≤")
            orders = trader.get_orders()
            if orders:
                orders_list = []
                for o in orders:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º UUID –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                    orders_list.append({
                        "ID": str(o.id),
                        "–°–∏–º–≤–æ–ª": o.symbol,
                        "–¢–∏–ø": o.side,
                        "–°—Ç–∞—Ç—É—Å": o.status,
                        "–ö–æ–ª-–≤–æ": o.qty,
                        "–¶–µ–Ω–∞": f"${o.filled_avg_price}" if o.filled_avg_price else "-"
                    })
                
                # –°–æ–∑–¥–∞–µ–º DataFrame —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
                if orders_list:
                    orders_df = pd.DataFrame(orders_list)
                    st.dataframe(orders_df)
                else:
                    st.info("–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤")
            else:
                st.info("–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤: {str(e)}")
            st.info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Alpaca")
            
    with col2:
        try:
            st.subheader("–°—á–µ—Ç")
            account = trader.get_account()
            st.metric("–ë–∞–ª–∞–Ω—Å", f"${account.equity}")
            st.metric("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞", f"${account.buying_power}")
            st.caption(f"–í–∞–ª—é—Ç–∞: {account.currency}")
            
            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
            if "-" in ticker:
                st.warning("–î–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å—á–µ—Ç –≤ USD")
            
            if st.button("–ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏", type="secondary"):
                try:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
                    current_time = time.time()
                    if current_time - st.session_state.last_trade_time < 5:
                        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏")
                        st.stop()
                    
                    trader.close_all_positions()
                    st.success("–ü–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã!")
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    st.session_state.data_loaded = False
                    st.session_state.last_trade_time = current_time
                except Exception as e:
                    error_msg = str(e)
                    if "wash trade" in error_msg.lower():
                        st.error("–û—à–∏–±–∫–∞: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é –∏–∑-–∑–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –æ—Ä–¥–µ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    else:
                        st.error(f"–û—à–∏–±–∫–∞: {error_msg}")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞: {str(e)}")