import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import numpy as np
from datetime import datetime
# –ò–ó–ú–ï–ù–Å–ù–ù–´–ï –ò–ú–ü–û–†–¢–´:
from data_loader import load_data
from indicators import add_technical_indicators
from paper_trade import PaperTrader

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
st.set_page_config(
    page_title="–¢—Ä–µ–π–¥–∏–Ω–≥ –ü–æ–º–æ—â–Ω–∏–∫",
    layout="wide",
    page_icon="üíπ"
)
st.title("üíπ –¢—Ä–µ–π–¥–∏–Ω–≥ –ü–æ–º–æ—â–Ω–∏–∫")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
if 'run_analysis' not in st.session_state:
    st.session_state.run_analysis = False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PaperTrader
try:
    trader = PaperTrader()
    alpaca_available = True
except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ PaperTrader: {str(e)}")
    trader = None
    alpaca_available = False

# –°–∞–π–¥–±–∞—Ä
with st.sidebar:
    st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    ticker = st.text_input("–¢–∏–∫–µ—Ä (AAPL, BTC-USD):", "AAPL")
    
    col1, col2 = st.columns(2)
    with col1:
        period = st.selectbox(
            "–ü–µ—Ä–∏–æ–¥",
            ["1d", "5d", "1mo", "3mo", "6mo", "1y", "max"],
            index=2
        )
    with col2:
        interval = st.selectbox(
            "–ò–Ω—Ç–µ—Ä–≤–∞–ª",
            ["1m", "5m", "15m", "30m", "1h", "1d"],
            index=5
        )
    
    if st.button("–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", type="primary"):
        st.session_state.run_analysis = True
        
    # –†–∞–∑–¥–µ–ª Paper Trading
    if alpaca_available:
        st.divider()
        st.header("üìä Paper Trading")
        
        try:
            account = trader.get_account()
            st.success("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Alpaca —É—Å–ø–µ—à–Ω–æ")
            st.caption(f"–ë–∞–ª–∞–Ω—Å: ${account.equity} | –í–∞–ª—é—Ç–∞: {account.currency}")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Alpaca: {str(e)}")
        
        # –§–æ—Ä–º–∞ –¥–ª—è –æ—Ä–¥–µ—Ä–æ–≤
        with st.form("order_form"):
            st.subheader("–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä")
            order_symbol = st.text_input("–¢–∏–∫–µ—Ä –æ—Ä–¥–µ—Ä–∞", ticker)
            order_qty = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", min_value=1, max_value=100, value=1)
            order_side = st.radio("–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏", ["Buy", "Sell"], index=0)
            
            if st.form_submit_button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ä–¥–µ—Ä"):
                try:
                    order = trader.place_order(order_symbol, order_qty, order_side)
                    st.success(f"–û—Ä–¥–µ—Ä #{order.id} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω!")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {str(e)}")
                    
        # –¢–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏
        try:
            positions = trader.get_positions()
            if positions:
                st.subheader("–¢–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏")
                for pos in positions:
                    st.info(f"{pos.symbol}: {pos.qty} —à—Ç. | –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${pos.current_price}")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {str(e)}")

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
if st.session_state.run_analysis:
    try:
        with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."):
            data = load_data(ticker, period, interval)
            
        if data.empty:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            data = add_technical_indicators(data)
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            if len(data) > 1:
                last_close = data['Close'].iloc[-1].item()
                prev_close = data['Close'].iloc[-2].item()
                change_pct = round(((last_close - prev_close) / prev_close * 100), 2)
            else:
                last_close = data['Close'].iloc[0].item() if len(data) == 1 else 0
                change_pct = 0
                st.warning("–ú–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã")
            
            st.success(f"–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã | {ticker} | {period} | {interval}")
            
            if last_close > 0:
                metric_col1, metric_col2 = st.columns(2)
                metric_col1.metric("–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞", f"{last_close:.2f}")
                metric_col2.metric("–ò–∑–º–µ–Ω–µ–Ω–∏–µ", f"{change_pct}%", 
                                  delta_color="inverse" if change_pct < 0 else "normal")
            
            # –ì—Ä–∞—Ñ–∏–∫–∏
            if not data.empty and len(data) > 1:
                try:
                    fig = go.Figure(data=[go.Candlestick(
                        x=data.index,
                        open=data['Open'],
                        high=data['High'],
                        low=data['Low'],
                        close=data['Close'],
                        name="–¶–µ–Ω—ã",
                        increasing_line_color='green',
                        decreasing_line_color='red'
                    )])
                    
                    if 'SMA20' in data.columns:
                        fig.add_trace(go.Scatter(
                            x=data.index,
                            y=data['SMA20'],
                            name='SMA 20',
                            line=dict(color='blue', width=2)
                        ))
                    
                    if 'SMA50' in data.columns:
                        fig.add_trace(go.Scatter(
                            x=data.index,
                            y=data['SMA50'],
                            name='SMA 50',
                            line=dict(color='orange', width=2)
                        ))
                    
                    fig.update_layout(
                        title=f"{ticker} - –°–≤–µ—á–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫",
                        xaxis_title="–î–∞—Ç–∞",
                        yaxis_title="–¶–µ–Ω–∞ ($)",
                        height=600,
                        template="plotly_white",
                        showlegend=True,
                        xaxis_rangeslider_visible=False
                    )
                    
                    st.plotly_chart(fig, use_container_width=True)
                    
                    if 'RSI' in data.columns:
                        st.subheader("–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä RSI")
                        rsi_fig = go.Figure()
                        rsi_fig.add_trace(go.Scatter(
                            x=data.index,
                            y=data['RSI'],
                            name='RSI',
                            line=dict(color='purple', width=2)
                        ))
                        rsi_fig.add_hline(y=30, line_dash="dash", line_color="green")
                        rsi_fig.add_hline(y=70, line_dash="dash", line_color="red")
                        rsi_fig.update_layout(height=300)
                        st.plotly_chart(rsi_fig, use_container_width=True)
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}")
            
            # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            with st.expander("üìã –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ"):
                st.dataframe(data.tail(20).sort_index(ascending=False))
                
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—á–µ—Å—Ç–≤–µ –¥–∞–Ω–Ω—ã—Ö
            with st.expander("üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö"):
                st.write(f"**–ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö:** {data.index[0].strftime('%Y-%m-%d')} - {data.index[-1].strftime('%Y-%m-%d')}")
                st.write(f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫:** {len(data)}")
                st.write(f"**–ò—Å—Ç–æ—á–Ω–∏–∫:** Yahoo Finance")
                st.write(f"**–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
                
    except Exception as e:
        st.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        st.write("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:")
        st.write(f"- –¢–∏–∫–µ—Ä: {ticker}")
        st.write(f"- –ü–µ—Ä–∏–æ–¥: {period}")
        st.write(f"- –ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval}")
        if 'data' in locals():
            st.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {len(data)}")
            st.write(f"–ö–æ–ª–æ–Ω–∫–∏: {data.columns.tolist()}")
            if not data.empty:
                st.write("–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å—Ç—Ä–æ–∫:")
                st.write(data.tail())
else:
    st.info("–ó–∞–¥–∞–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –Ω–∞–∂–º–∏—Ç–µ '–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'")
    st.image("https://via.placeholder.com/800x400?text=–ì—Ä–∞—Ñ–∏–∫+–ø–æ—è–≤–∏—Ç—Å—è+–ø–æ—Å–ª–µ+–∑–∞–≥—Ä—É–∑–∫–∏", 
             caption="–ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª –¥–ª—è Paper Trading
if alpaca_available and st.session_state.run_analysis:
    st.divider()
    st.header("üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Paper Trading")
    
    col1, col2 = st.columns(2)
    
    with col1:
        try:
            st.subheader("–ò—Å—Ç–æ—Ä–∏—è –æ—Ä–¥–µ—Ä–æ–≤")
            orders = trader.get_orders(status='all')[:5]
            if orders:
                order_data = []
                for order in orders:
                    order_data.append({
                        "ID": order.id,
                        "–°–∏–º–≤–æ–ª": order.symbol,
                        "–¢–∏–ø": order.side,
                        "–°—Ç–∞—Ç—É—Å": order.status,
                        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": order.qty,
                        "–¶–µ–Ω–∞": f"${order.filled_avg_price}" if order.filled_avg_price else "-"
                    })
                st.dataframe(pd.DataFrame(order_data))
            else:
                st.info("–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤: {str(e)}")
            
    with col2:
        try:
            st.subheader("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞")
            account = trader.get_account()
            st.metric("–ë–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞", f"${account.equity}")
            st.metric("–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏", f"${account.buying_power}")
            st.metric("–í–∞–ª—é—Ç–∞", account.currency)
            
            if st.button("–ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏", type="secondary"):
                try:
                    trader.close_all_positions()
                    st.success("–í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã!")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–π: {str(e)}")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—á–µ—Ç–µ: {str(e)}")